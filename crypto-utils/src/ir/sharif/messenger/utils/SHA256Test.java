package ir.sharif.messenger.utils;

import static org.junit.Assert.*;

import org.junit.Test;

public class SHA256Test {

	@Test
	public void paddingTest() {
		String message = "hello world";
		byte[] messageAsBytes = message.getBytes();
		
		byte[] paddedMessage = SHA256.initialMessagePadding(messageAsBytes);
		byte[] expected = {
			0b01101000, 0b01100101, 0b01101100, 0b01101100, 0b01101111, 0b00100000, 0b01110111, 0b01101111,
			0b01110010, 0b01101100, 0b01100100, (byte) 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000,
			0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b01011000
		};
		
		assertArrayEquals(expected, paddedMessage);
	}

	@Test
	public void schedulingTest() {
		String message = "hello world";
		byte[] messageAsBytes = message.getBytes();
		
		byte[] paddedMessage = SHA256.initialMessagePadding(messageAsBytes);
		int[] messageScheduled = SHA256.schedule(paddedMessage);

		int[] expecteds = {
				0b01101000011001010110110001101100, 0b01101111001000000111011101101111,
				0b01110010011011000110010010000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000000000000,
				0b00000000000000000000000000000000, 0b00000000000000000000000001011000,
				0b00110111010001110000001000110111, 0b10000110110100001100000000110001,
				0b11010011101111010001000100001011, 0b01111000001111110100011110000010,
				0b00101010100100000111110011101101, 0b01001011001011110111110011001001,
				0b00110001111000011001010001011101, 0b10001001001101100100100101100100,
				0b01111111011110100000011011011010, 0b11000001011110011010100100111010,
				0b10111011111010001111011001010101, 0b00001100000110101110001111100110,
				0b10110000111111100000110101111101, 0b01011111011011100101010110010011,
				0b00000000100010011001101101010010, 0b00000111111100011100101010010100,
				0b00111011010111111110010111010110, 0b01101000011001010110001011100110,
				0b11001000010011100000101010011110, 0b00000110101011111001101100100101,
				0b10010010111011110110010011010111, 0b01100011111110010101111001011010,
				0b11100011000101100110011111010111, 0b10000100001110111101111000010110,
				0b11101110111011001010100001011011, 0b10100000010011111111001000100001,
				0b11111001000110001010110110111000, 0b00010100101010001001001000011001,
				0b00010000100001000101001100011101, 0b01100000100100111110000011001101,
				0b10000011000000110101111111101001, 0b11010101101011100111100100111000,
				0b00111001001111110000010110101101, 0b11111011010010110001101111101111,
				0b11101011011101011111111100101001, 0b01101010001101101001010100110100,
				0b00100010111111001001110011011000, 0b10101001011101000000110100101011,
				0b01100000110011110011100010000101, 0b11000100101011001001100000111010,
				0b00010001010000101111110110101101, 0b10110000101100000001110111011001,
				0b10011000111100001100001101101111, 0b01110010000101111011100000011110,
				0b10100010110101000110011110011010, 0b00000001000011111001100101111011,
				0b11111100000101110100111100001010, 0b11000010110000101110101100010110	
		};
		
		assertArrayEquals(expecteds, messageScheduled);
	}
	
	@Test
	public void compressionTest() {
		String message = "hello world";
		byte[] messageAsBytes = message.getBytes();	
		
		byte[] paddedMessage = SHA256.initialMessagePadding(messageAsBytes);
		int[] messageScheduled = SHA256.schedule(paddedMessage);
		int[] H = SHA256.compress(messageScheduled, SHA256.getInitialH());
		
		int[] expecteds = {
			 0b10111001010011010010011110111001,
			 0b10010011010011010011111000001000,
			 0b10100101001011100101001011010111,
			 0b11011010011111011010101111111010,
			 0b11000100100001001110111111100011,
			 0b01111010010100111000000011101110,
			 0b10010000100010001111011110101100,
			 0b11100010111011111100110111101001	
		};
		
		assertArrayEquals(expecteds, H);
	}
	
	@Test
	public void hashByteTest() {
		String message = "hello world";
		byte[] messageAsBytes = message.getBytes();
		byte[] hashAsBytes = SHA256.hashByte(messageAsBytes);
		byte[] expecteds = {
			 (byte)0b10111001, (byte)0b01001101, (byte)0b00100111, (byte)0b10111001,
			 (byte)0b10010011, (byte)0b01001101, (byte)0b00111110, (byte)0b00001000,
			 (byte)0b10100101, (byte)0b00101110, (byte)0b01010010, (byte)0b11010111,
			 (byte)0b11011010, (byte)0b01111101, (byte)0b10101011, (byte)0b11111010,
			 (byte)0b11000100, (byte)0b10000100, (byte)0b11101111, (byte)0b11100011,
			 (byte)0b01111010, (byte)0b01010011, (byte)0b10000000, (byte)0b11101110,
			 (byte)0b10010000, (byte)0b10001000, (byte)0b11110111, (byte)0b10101100,
			 (byte)0b11100010, (byte)0b11101111, (byte)0b11001101, (byte)0b11101001					
		};
		
		assertArrayEquals(expecteds, hashAsBytes);
	}
	
	@Test
	public void hashTest() {
		String message1 = "hello world";
		String hashOfMessage1 = SHA256.hash(message1, "hex");
		String expected1 = "B94D27B9934D3E08A52E52D7DA7DABFAC484EFE37A5380EE9088F7ACE2EFCDE9";
		String message2 = "this is a simple test for SHA256 that was implemented by a dull person.";
		String hashOfMessage2 = SHA256.hash(message2, "Hex");
		String expected2 = "F7A121D2B0FFE0F149DBD3792F5B6239EEC02633BE716A6F7B0C130067FE83FC";
		String message3 = 
				"This is a message that I am trying to pad it as long as I can to make sure I \n" + 
				"have not messed up the message chunking part of the function and since I \n" + 
				"have barely any faith in myself, you could probably see why I am padding this so long.";
		String hashOfMessage3 = SHA256.hash(message3, "hex");
		String expected3 = "63ACCA0C35C3FECBEFDCB46815DF69221407BA08305B52BE88DCB23DD9D71BA5";
		
		assertEquals(expected1, hashOfMessage1);
		assertEquals(expected2, hashOfMessage2);
		assertEquals(expected3, hashOfMessage3);
	}
}
